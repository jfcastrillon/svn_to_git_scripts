#!/bin/bash

if [ "$#" -ne 11 ]; then
    echo "Illegal number of parameters"
    exit 1
fi

###########################
####### SVN
# SVN repository to be migrated
SVN_HOST=$1
SVN_USER=$2
SVN_PASSWORD=$3
SVN_BRANCHES=$4
SVN_TAGS=$5
SVN_TRUNK=$6

####### Project name #######
PROJECT_NAME=${11}

BASE_SVN="$SVN_HOST/$PROJECT_NAME"
SVN_ARGS=" --non-interactive --username=$SVN_USER --password=$SVN_PASSWORD"

####### Removes slashes from the project name and replace it with underscore
PROJECT_NAME=${PROJECT_NAME//[\/]/_}

###########################
####### GIT
# Git repository to migrate
GIT_URL="$8://$9:${10}@$7/${PROJECT_NAME}.git"

# Geral Configuration
ABSOLUTE_PATH=$(pwd)
TMP=$ABSOLUTE_PATH/"migration-"$PROJECT_NAME

# Branchs Configuration
SVN_BRANCHES=$BASE_SVN/$SVN_BRANCHES
SVN_TAGS=$BASE_SVN/$SVN_TAGS
SVN_TRUNK=$BASE_SVN/$SVN_TRUNK

echo '[LOG] Starting migration of '$SVN_TRUNK
echo '[LOG] Using: '$(git --version)
echo '[LOG] Using: '$(svn --version | grep svn,)

if [ ! -d "$TMP" ]; then
  # Control will enter here if $DIRECTORY doesn't exist.
  mkdir $TMP
fi

cd $TMP

echo
echo '[LOG] Getting SSL certificates'
svn info $BASE_SVN $SVN_ARGS

echo
echo '[LOG] Getting first revision'
FIRST_REVISION=$( svn log -r 1:HEAD --limit 1 $BASE_SVN $SVN_ARGS | awk -F '|' '/^r/ {sub("^ ", "", $1); sub(" $", "", $1); print $1}' )

echo
echo '[RUN] git svn fetch -'$FIRST_REVISION':HEAD'
git svn fetch -$FIRST_REVISION:HEAD

# Cache the credentials
git config credential.helper 'cache --timeout=3600'

echo
echo '[RUN] git remote add origin '$GIT_URL
git remote add origin $GIT_URL

echo
echo '[RUN] svn ls '$SVN_BRANCHES
for BRANCH in $(svn ls $SVN_BRANCHES); do
    echo git branch ${BRANCH%/} remotes/svn/${BRANCH%/}
    git branch ${BRANCH%/} remotes/svn/${BRANCH%/}
done

git for-each-ref --format="%(refname:short) %(objectname)" refs/remotes/origin/tags | grep -v "@" | cut -d / -f 3- |
while read ref
do
  echo git tag -a $ref -m 'import tag from svn'
  git tag -a $ref -m 'import tag from svn'
done

git for-each-ref --format="%(refname:short)" refs/remotes/origin/tags | cut -d / -f 1- |
while read ref
do
  git branch -rd $ref
done


push() {
    git branch â€“r

    # Keep the ignore settings
    git svn show-ignore > .gitignore

    # Removes the validation of SSL certs
    git config --global http.sslVerify false

    # Reassign the branches
    cp -rf .git/refs/remotes/origin/tags/* .git/refs/tags/
    rm -rf .git/refs/remotes/origin/tags
    cp -rf .git/refs/remotes/origin/* .git/refs/heads/
    rm -rf .git/refs/remotes/origin

    # Delete the branch trunk
    git branch -d trunk

    # Push to remote all the branches and tags
    git push origin --all
    git push origin --tags

    OUTPUT=$?
}
echo
echo '[RUN] git push'

# Call the function to push
push
if [[ $OUTPUT -eq 0 ]]; then
    echo 'Sucessufull.'
else
    echo 'Error!'
fi
